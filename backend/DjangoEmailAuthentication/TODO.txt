Email Authentication

[x] Register
    [x] Make Model
    [x] Save Data in the Model
    [] Set User In-active till user clicks the verification code and the verification code is verified.
        [x] set user inactive
        [x] verification code generation
        [x] calling verification code method in view -> [x] created a new function named VerifyEmailTokenCode
        [x] save verification code in the database
    

[x] Send Email
    [x] Create Token
    [x] Set Token Validity period.
    [x] Call the token and attach token in email.
    [x] Get email from the user request/form.
    [x] Send the token attached mail to the user via provided email.
   
[x] User Clicks the Verification Code
    [x] redirect to verification code function.

[x] check whether the verification code is correct
    
[x] Set user active if the verification code is correctly verified.
    [x] make a function for verifying email token code
    [x] check if the code is correct
    [x] exception handling in token
    [x] login the user

[x] User gets redirected to Dashboard
    [x] if token is not valid give invalid exception

[] Create functions
    [x] Login API function
         Note: During login the user was not able to get authenticated result in 401 UnAuthorized. 
                What was the reason for not getting authenticated? But the super_user was able to get authenticated. Why so? 
                In admin panel when compared it was found out that the user has password that has raw password that has not been hashed, while super_user's password was hashed. So when authenticate() function was called then it was throwing "None" result. Resulting in failing of authentication.
                On researching I found out that when using custom user for authentication, provide set_password in backend for making has password. But I already mentioned it there.
                Later I found out that when you're registering user via API calls then in ModelSerializer one have to override the create() function. In this create method, create the hash password. And save it.

                I did but failed to get result. Minor mistake was that I wrote create() method inside Meta class which should be outside the Meta Class.
    [x] Logout API function

[x] User logs out

[x] One time verification for token

[x] User is redirected to login page

[x] User enters credentials

[x] User is logged in.
    